// backend/src/agents/crossmintAgent.js
const axios = require('axios');

// 配置 - 从环境变量获取API密钥
const CROSSMINT_API_KEY = process.env.CROSSMINT_API_KEY;
const CROSSMINT_CLIENT_SECRET = process.env.CROSSMINT_CLIENT_SECRET;
const BASE_URL = 'https://staging.crossmint.com'; // 使用staging环境进行开发测试

// NFT 元数据模板 - 精心设计以展示价值
const NFT_METADATA_TEMPLATE = {
  name: "InsightPilot Report: @{username}",
  description: "AI-powered user analysis report generated by InsightPilot. This NFT represents a comprehensive user insight analysis including persona generation, interview questions, and voice synthesis.",
  image: "https://i.ibb.co/8X9Y2Z3/insightpilot-nft.png", // 项目代表图片
  attributes: [
    { "trait_type": "Target User", "value": "@{username}" },
    { "trait_type": "Analyzed Product", "value": "{productDescription}" },
    { "trait_type": "User Persona", "value": "{personaSummary}" },
    { "trait_type": "Number of Questions", "value": "{questionCount}" },
    { "trait_type": "AI Model", "value": "Mistral AI" },
    { "trait_type": "Voice Synthesis", "value": "ElevenLabs" },
    { "trait_type": "Analysis Date", "value": "{analysisDate}" },
    { "trait_type": "Report ID", "value": "{reportId}" }
  ],
  external_url: "https://insightpilot.vercel.app"
};

/**
 * 构建 NFT 元数据
 * @param {Object} reportData - 包含所有分析结果的对象
 * @returns {Object} - 格式化的 NFT 元数据
 */
function buildNFTMetadata(reportData) {
  console.log('[Crossmint Agent] Building NFT metadata...');
  
  const {
    username,
    productDescription,
    persona,
    interviewQuestions,
    audioResult,
    requestId
  } = reportData;

  // 生成简化的用户画像摘要（用于attributes）
  const personaSummary = persona.length > 50 
    ? persona.substring(0, 50) + '...' 
    : persona;

  // 构建元数据
  const metadata = {
    name: `InsightPilot Report: @${username}`,
    description: `AI-powered user analysis report for @${username}. Generated by InsightPilot using Mistral AI for persona analysis and ElevenLabs for voice synthesis. This NFT represents a comprehensive user insight analysis.`,
    image: "https://i.ibb.co/8X9Y2Z3/insightpilot-nft.png",
    attributes: [
      { "trait_type": "Target User", "value": `@${username}` },
      { "trait_type": "Analyzed Product", "value": productDescription },
      { "trait_type": "User Persona", "value": personaSummary },
      { "trait_type": "Number of Questions", "value": interviewQuestions.length },
      { "trait_type": "AI Model", "value": "Mistral AI" },
      { "trait_type": "Voice Synthesis", "value": audioResult ? "ElevenLabs" : "Not Available" },
      { "trait_type": "Analysis Date", "value": new Date().toISOString().split('T')[0] },
      { "trait_type": "Report ID", "value": requestId.toString() }
    ],
    external_url: "https://insightpilot.vercel.app"
  };

  console.log('[Crossmint Agent] NFT metadata built successfully');
  return metadata;
}

/**
 * 创建 Crossmint Collection（如果不存在）
 * @returns {Promise<Object>} - Collection 信息
 */
async function createCollectionIfNeeded() {
  try {
    console.log('[Crossmint Agent] Checking/creating collection...');
    
    const response = await axios.post(
      `${BASE_URL}/api/2022-06-09/collections`,
      {
        chain: "polygon",
        metadata: {
          name: "InsightPilot Reports",
          imageUrl: "https://i.ibb.co/8X9Y2Z3/insightpilot-nft.png",
          description: "AI-powered user insight analysis reports generated by InsightPilot"
        }
      },
      {
        headers: {
          'X-API-KEY': CROSSMINT_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('[Crossmint Agent] Collection ready:', response.data.id);
    return response.data;
    
  } catch (error) {
    console.error('[Crossmint Agent] Collection creation failed:', error.response?.data || error.message);
    throw new Error(`Collection creation failed: ${error.message}`);
  }
}

/**
 * 核心功能：铸造 InsightPilot NFT
 * @param {string} recipientEmail - 接收NFT的用户邮箱
 * @param {Object} reportData - 包含所有分析结果的对象
 * @returns {Promise<Object>} - NFT铸造结果
 */
async function mintInsightNFT(recipientEmail, reportData) {
  try {
    console.log(`[Crossmint Agent] Starting NFT minting for ${recipientEmail}...`);
    
    // 构建NFT元数据
    const metadata = buildNFTMetadata(reportData);
    
    // 创建Collection（如果需要）
    const collection = await createCollectionIfNeeded();
    
    // 铸造NFT
    const mintResponse = await axios.post(
      `${BASE_URL}/api/2022-06-09/collections/${collection.id}/nfts`,
      {
        recipient: `email:${recipientEmail}:polygon`,
        metadata: metadata,
        reuploadLinkedFiles: true
      },
      {
        headers: {
          'X-API-KEY': CROSSMINT_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );

    const result = {
      success: true,
      nftId: mintResponse.data.id,
      transactionId: mintResponse.data.txHash,
      explorerUrl: `https://polygonscan.com/tx/${mintResponse.data.txHash}`,
      collectionId: collection.id,
      recipientEmail: recipientEmail,
      metadata: metadata
    };

    console.log('[Crossmint Agent] NFT minted successfully:', result.nftId);
    return result;

  } catch (error) {
    console.error('[Crossmint Agent] NFT minting failed:', error.response?.data || error.message);
    
    // 提供详细的错误信息
    if (error.response?.status === 401) {
      throw new Error('Crossmint API密钥无效或未设置');
    } else if (error.response?.status === 429) {
      throw new Error('Crossmint API限额已用完，请检查账户');
    } else if (error.response?.status === 400) {
      throw new Error('NFT铸造请求参数错误，请检查邮箱格式');
    }
    
    throw new Error(`NFT铸造失败: ${error.message}`);
  }
}

/**
 * 备用方案：模拟NFT铸造（用于开发和测试）
 * @param {string} recipientEmail - 接收NFT的用户邮箱
 * @param {Object} reportData - 包含所有分析结果的对象
 * @returns {Promise<Object>} - 模拟的NFT铸造结果
 */
async function mintInsightNFTMock(recipientEmail, reportData) {
  console.log('[Crossmint Agent] Using mock implementation for development');
  
  const metadata = buildNFTMetadata(reportData);
  
  // 生成模拟的NFT信息
  const mockResult = {
    success: true,
    nftId: `mock-nft-${Date.now()}`,
    transactionId: `0x${Math.random().toString(16).substr(2, 64)}`,
    explorerUrl: `https://polygonscan.com/tx/mock-transaction-${Date.now()}`,
    collectionId: 'mock-collection-insightpilot',
    recipientEmail: recipientEmail,
    metadata: metadata,
    isMock: true
  };

  console.log(`[Crossmint Agent] Mock NFT created: ${mockResult.nftId}`);
  console.log(`[Crossmint Agent] Would mint to: ${recipientEmail}`);
  console.log(`[Crossmint Agent] Metadata: ${JSON.stringify(metadata, null, 2)}`);
  
  return mockResult;
}

/**
 * 智能NFT铸造 - 自动选择真实或模拟模式
 * @param {string} recipientEmail - 接收NFT的用户邮箱
 * @param {Object} reportData - 包含所有分析结果的对象
 * @returns {Promise<Object>} - NFT铸造结果
 */
async function mintInsightNFTSmart(recipientEmail, reportData) {
  // 检查是否有API密钥
  if (!CROSSMINT_API_KEY || !CROSSMINT_CLIENT_SECRET) {
    console.warn('[Crossmint Agent] API keys not found, using mock mode');
    return await mintInsightNFTMock(recipientEmail, reportData);
  }

  try {
    return await mintInsightNFT(recipientEmail, reportData);
  } catch (error) {
    console.warn('[Crossmint Agent] Real minting failed, falling back to mock:', error.message);
    return await mintInsightNFTMock(recipientEmail, reportData);
  }
}

module.exports = { 
  mintInsightNFT, 
  mintInsightNFTMock, 
  mintInsightNFTSmart,
  buildNFTMetadata,
  NFT_METADATA_TEMPLATE 
};
